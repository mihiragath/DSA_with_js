‚úÖ 1. Notations (Big-O, Big-Œò, Big-Œ©)

| Notation  | Meaning                    | Used For         |
| --------- | -------------------------- | ---------------- |
| `O(f(n))` | Upper bound (Worst Case)   | Always important |
| `Œ©(f(n))` | Lower bound (Best Case)    | Optional         |
| `Œò(f(n))` | Tight bound (Average Case) | For exact match  |


‚úÖ 2. Best / Average / Worst Case

| Case    | Meaning              | Example (Linear Search) |
| ------- | -------------------- | ----------------------- |
| Best    | Fastest case (ideal) | `x` at index 0 ‚Üí `O(1)` |
| Average | Typical case         | Middle index ‚Üí `Œò(n)`   |
| Worst   | Slowest case         | Not found ‚Üí `O(n)`      |

‚úÖ 3. Common Time Complexities with Examples

| Time         | Description | Example                      |
| ------------ | ----------- | ---------------------------- |
| `O(1)`       | Constant    | Access array element         |
| `O(log n)`   | Logarithmic | Binary search                |
| `O(n)`       | Linear      | For loop on array            |
| `O(n log n)` | Log-linear  | Merge Sort, Quick Sort (avg) |
| `O(n¬≤)`      | Quadratic   | Bubble sort, Nested loop     |
| `O(2‚Åø)`      | Exponential | Recursive Fibonacci          |
| `O(n!)`      | Factorial   | Permutations (backtracking)  |


‚úÖ 4. Time Complexity Equations (Big-O Form)

| Pattern / Algo      | Time Complexity | Equation                     |
| ------------------- | --------------- | ---------------------------- |
| Simple loop         | `O(n)`          | `T(n) = cn`                  |
| Nested loop         | `O(n¬≤)`         | `T(n) = c √ó n¬≤`              |
| Binary Search       | `O(log n)`      | `T(n) = T(n/2) + c`          |
| Merge Sort          | `O(n log n)`    | `T(n) = 2T(n/2) + cn`        |
| Factorial Recursion | `O(n)`          | `T(n) = T(n-1) + c`          |
| Fibonacci (naive)   | `O(2‚Åø)`         | `T(n) = T(n-1) + T(n-2) + c` |
| Hanoi Tower         | `O(2‚Åø)`         | `T(n) = 2T(n-1) + c`         |


‚úÖ 5. Space Complexity Basics

| Type             | Space Complexity | Example                |
| ---------------- | ---------------- | ---------------------- |
| No extra space   | `O(1)`           | Sum of array           |
| Extra array used | `O(n)`           | Prefix sum, merge sort |
| Recursive call   | `O(n)`           | Depth of recursion     |

‚úÖ 6. Master Theorem (Shortcut)
Given:

T(n) = aT(n/b) + O(n·µà)

| Case            | Result          |
| --------------- | --------------- |
| `d < log_b(a)`  | `O(n^log_b(a))` |
| `d == log_b(a)` | `O(n^d log n)`  |
| `d > log_b(a)`  | `O(n^d)`        |

üî∏ Example:
T(n) = 2T(n/2) + O(n)
‚Üí a = 2, b = 2, d = 1
‚Üí log‚ÇÇ(2) = 1
‚úÖ So, T(n) = O(n log n) ‚úÖ

‚úÖ 7. LeetCode / Interview Safe Time Limits (TLE Chart)

| Input Size `n`    | Max Safe Time Complexity |
| ----------------- | ------------------------ |
| `n ‚â§ 10`          | `O(n!)` / `O(2‚Åø)`        |
| `n ‚â§ 20`          | `O(2‚Åø * n)`              |
| `n ‚â§ 100`         | `O(n¬≥)`                  |
| `n ‚â§ 1,000`       | `O(n¬≤)`                  |
| `n ‚â§ 10^4`        | `O(n log n)`             |
| `n ‚â§ 10^5 ~ 10^6` | `O(n)`                   |


‚úÖ 8. Cheat Table (Summary)

| Algorithm         | Best       | Avg        | Worst      | Space    |
| ----------------- | ---------- | ---------- | ---------- | -------- |
| Linear Search     | O(1)       | O(n)       | O(n)       | O(1)     |
| Binary Search     | O(1)       | O(log n)   | O(log n)   | O(1)     |
| Bubble Sort       | O(n)       | O(n¬≤)      | O(n¬≤)      | O(1)     |
| Merge Sort        | O(n log n) | O(n log n) | O(n log n) | O(n)     |
| Quick Sort        | O(n log n) | O(n log n) | O(n¬≤)      | O(log n) |
| Fibonacci (naive) | O(1)       | -          | O(2‚Åø)      | O(n)     |

Example:-
1.
for(.....){}
for(.....){} O(n)

2.
for(...){
  for(...){}
}
for(...){} O{n¬≤}

3.
O(n¬≤) + O(n) + O(logn)
= O(n¬≤)
always choose the bigest time complexity of the Equation 

